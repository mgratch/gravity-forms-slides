// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin cf() {
	content: "";
	display: table;
}

// Clear after (not all clearfix need this also)
@mixin cf-after() {
	clear: both;
}

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline-px: 16px;

@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem; }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero, return 0
      @if $value == 0 {
        $rem-values: append($rem-values, $value); }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem); } }
    // Return the property and its list of converted values
    #{$property}: $rem-values; } }
// Usage:
// .element {
//   @include rem('padding',10px 0 2px 5px);
// }

@each $font-face in font-1, font-2  {
  @font-face {
    font-family: $font-face; font-style: normal; font-weight: normal;
    src: url('/path/to/font/#{$font-face}.eot');
    src: url('/path/to/font/#{$font-face}.eot?') format('eot'),
    url('/path/to/font/#{$font-face}.woff') format('woff'),
    url('/path/to/font/#{$font-face}.ttf')  format('truetype');
  }
}